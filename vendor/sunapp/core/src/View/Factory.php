<?php

namespace SunAppModules\Core\src\View;

use Illuminate\View\Factory as BaseFactory;

class Factory extends BaseFactory
{
    public function exists($view)
    {
        $this->initTheme();
        return parent::exists($view); // TODO: Change the autogenerated stub
    }

    /**
     * Get the evaluated view contents for the given view.
     *
     * @param  string  $org_view
     * @param  array  $data
     * @param  array  $mergeData
     * @return \Illuminate\Contracts\View\View
     */
    public function make($org_view, $data = [], $mergeData = [])
    {
        $theme = $this->initTheme();
        if ($theme) {
            if (parent::exists($this->getThemeNamespace($org_view, $theme))) {
                $view = $this->getThemeNamespace($org_view, $theme);
            } elseif (parent::exists($this->getThemeParentNamespace($org_view, $theme))) {
                $view = $this->getThemeParentNamespace($org_view, $theme);
            } else {
                $view = $org_view;
            }
        } else {
            $view = $org_view;
        }
        $path = $this->finder->find(
            $view = $this->normalizeName($view)
        );
        // Next, we will create the view instance and call the view creator for the view
        // which can set any data, etc. Then we will return the view instance back to
        // the caller for rendering or performing other view manipulations on this.
        $data = array_merge($mergeData, $this->parseData($data));
        return parent::make($view, $data, $mergeData);
        //return $theme->of($view, $data)->render();

        // return tap($this->viewInstance($view, $path, $data), function ($view) {
        //     $this->callCreator($view);
        // });
    }

    protected function initTheme($theme = null)
    {
        $theme = app('theme');
        // Add Theme Paths to FileViewFinder
        $this->addThemePathLocation($theme->path(), $theme);
        $view = $theme->getView();
        $global_view = app('view');
        $finder = $global_view->getFinder();

        if ($theme->getConfig('inherit')) {
            // Inherit from theme name.
            $inherit = $theme->getConfig('inherit');
            $finder->prependNamespace('errors', $theme->path($inherit) . '/views/errors');
            $finder->prependNamespace('notifications', $theme->path($inherit) . '/views/notifications');
            $finder->prependNamespace('pagination', $theme->path($inherit) . '/views/pagination');

            $finder->addLocation($theme->path($inherit) . '/views');
        }

        $finder->prependNamespace('errors', $theme->getThemePath() . 'views/errors');
        $finder->prependNamespace('notifications', $theme->getThemePath() . 'views/notifications');
        $finder->prependNamespace('pagination', $theme->getThemePath() . 'views/pagination');

        $finder->addLocation($theme->getThemePath() . 'views');
        $view->setFinder($finder);

        // Fire event before set up a theme.
        $theme->fire('before', $theme);
        // Before from a public theme config.
        $theme->fire('appendBefore', $theme);

        if ($theme->getConfig('inherit_events')) {
            $clone_theme = clone app('theme');
            $parent_theme = $clone_theme->theme($theme->getConfig('inherit'));
            $parent_theme->fire('before', $theme);
            $parent_theme->fire('appendBefore', $theme);
        }

        // Add asset path to asset container.
        $theme->asset()->addPath($theme->path() . '/assets');
        if ($theme->getConfig('inherit_assets')) {
            $theme->asset()->addPath($theme->path($theme->getConfig('inherit')) . '/assets');
        }

        /* foreach($theme->all() as $them) {
             $theme->addNamespace($them, $theme->path($them)."/view");
         }*/

        return $theme;
    }

    protected function getThemeNamespace($view, $theme = null)
    {
        if ($theme) {
            if ($this->finder->hasHintInformation($name = trim($view))) {
                $segments = explode('::', $name);
                if ($segments[0] == 'errors') {
                    $view = $theme->getThemeNamespace("views.{$segments[0]}.{$segments[1]}");
                } else {
                    $view = $theme->getThemeNamespace("modules.{$segments[0]}.views.{$segments[1]}");
                }
            } else {
                $view = $theme->getThemeNamespace('views.' . $view);
            }
        }

        return $view;
    }

    protected function getThemeParentNamespace($view, $theme = null)
    {
        if ($theme->exists($theme->info('parent'))) {
            $parent = $this->initTheme($theme->uses($theme->info('parent')));
            return $this->getThemeNamespace($view, $parent);
        }
        return false;
    }

    /**
     * Add location path to look up.
     *
     * @param  string  $location
     */
    protected function addThemePathLocation($location, $theme)
    {
        // First path is in the selected theme.
        $hints[] = base_path($location);
        // This is nice feature to use inherit from another.
        if ($theme->getConfig('inherit')) {
            // Inherit from theme name.
            $inherit = $theme->getConfig('inherit');

            // Inherit theme path.
            $inheritPath = base_path($theme->path($inherit));

            if ($theme->getFiles()->isDirectory($inheritPath)) {
                array_push($hints, $inheritPath);
            }
        }
        // Add namespace with hinting paths.
        $this->addNamespace($theme->getThemeNamespace(), $hints);
    }
}
